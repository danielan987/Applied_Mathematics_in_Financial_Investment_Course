import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt
import numpy as np

# Define the date range
end_date = dt.datetime.now()
start_date = end_date - dt.timedelta(days=365)

# Fetch the stock data
df = yf.download('XIC.TO', start=start_date, end=end_date)

# Calculate the 20-day and 50-day EMAs and SMAs
df['20-day EMA'] = df['Adj Close'].ewm(span=20, adjust=False).mean()
df['50-day EMA'] = df['Adj Close'].ewm(span=50, adjust=False).mean()
df['20-day SMA'] = df['Adj Close'].rolling(window=20).mean()
df['50-day SMA'] = df['Adj Close'].rolling(window=50).mean()

# Calculate the ATR
df['High-Low'] = df['High'] - df['Low']
df['High-Prev Close'] = abs(df['High'] - df['Close'].shift())
df['Low-Prev Close'] = abs(df['Low'] - df['Close'].shift())
df['TR'] = df[['High-Low', 'High-Prev Close', 'Low-Prev Close']].max(axis=1)
df['ATR'] = df['TR'].rolling(window=14).mean()

# 3xATR for stop loss positions
df['3xATR'] = df['ATR'] * 3

# Calculate the RSI
delta = df['Adj Close'].diff(1)
gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
RS = gain / loss
df['RSI'] = 100 - (100 / (1 + RS))

# Plotting
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10), gridspec_kw={'height_ratios': [3, 1]})
ax1.plot(df.index, df['Adj Close'], label='Adj Close Price')
ax1.plot(df.index, df['Close'], label='Close', alpha=0.5)
ax1.plot(df.index, df['20-day EMA'], label='20-day EMA')
ax1.plot(df.index, df['50-day EMA'], label='50-day EMA')
#ax1.plot(df.index, df['20-day SMA'], label='20-day SMA', alpha=0.5)
#ax1.plot(df.index, df['50-day SMA'], label='50-day SMA', alpha=0.5)
ax1.plot(df.index, df['Close'] - df['3xATR'], label='3xATR Stop Loss', linestyle='--')
ax1.set_title('Stock Price, Moving Average, and 3xATR')
ax1.legend()

ax2.plot(df.index, df['RSI'], label='RSI', color='purple')
ax2.axhline(70, linestyle='--', alpha=0.5, color='red')
ax2.axhline(30, linestyle='--', alpha=0.5, color='green')
ax2.set_title('Relative Strength Index (RSI)')
ax2.legend()

plt.tight_layout()
plt.show()
